<?xml version="1.0"?>
<package>
<!-- <package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd"> -->
  <metadata>
    <id>UnityAutoRegistration</id>
    <version>$version$</version>
    <title>Unity Auto Registration</title>
    <authors>$author$</authors>
    <owners>$author$</owners>
    <licenseUrl>https://github.com/astaerk/AutoRegistration/blob/master/LICENSE.md</licenseUrl>
    <projectUrl>https://github.com/astaerk/AutoRegistration</projectUrl>
    <!--<iconUrl>http://www.url.de/nuget_icon.png</iconUrl>-->
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>Unity Auto Registration extends the Unity IoC container and provides a fluent syntax to configure rules for automatic type registration. Using few lines of code you can scan specified assemblies and register all types that satisfy your rules.

Rules for determining whether to include/exclude types/assemblies are predicates (Predicate&lt;T&gt;) so you can use lambda syntax or direct method name to specify them. There are a few methods in an If helper class (like Implements, DecoratedWith) to cover some common scenarios of type registration.</description>
    <summary>Unity Auto Registration extends the Unity IoC container and provides a fluent syntax to configure rules for automatic type registration.</summary>
	<language>en-AU</language>
	<!--<releaseNotes>Summary of changes made in this release of the package.</releaseNotes>-->
    <tags>.NET Auto-registration Autoregistration dependency-container dependency-injection Enterprise-Library Fluent-Interface Inversion-of-Control IoC DI lambda Unity</tags>
  </metadata>
</package>